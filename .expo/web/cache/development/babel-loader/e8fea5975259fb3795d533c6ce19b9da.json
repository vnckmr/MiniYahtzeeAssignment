{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport styles from \"../style/style\";\nimport { Col, Grid, Row } from \"react-native-easy-grid\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar board = [];\nvar NBR_OF_DICES = 5;\nvar NBR_OF_THROWS = 3;\nvar icons = [];\nexport default function Gameboard() {\n  var _useState = useState(NBR_OF_THROWS),\n      _useState2 = _slicedToArray(_useState, 2),\n      nbrOfThrowsLeft = _useState2[0],\n      setNbrOfThrowsLeft = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = useState(new Array(NBR_OF_DICES).fill(false)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedDices = _useState6[0],\n      setSelectedDices = _useState6[1];\n\n  var _useState7 = useState(new Array(6).fill(false)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedIcons = _useState8[0],\n      setSelectedIcons = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      total = _useState10[0],\n      setTotal = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      icon = _useState12[0],\n      setIcon = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      points = _useState14[0],\n      setPoints = _useState14[1];\n\n  var row = [];\n\n  var _loop = function _loop(i) {\n    row.push(_jsx(Pressable, {\n      onPress: function onPress() {\n        return selectDice(i);\n      },\n      children: _jsx(MaterialCommunityIcons, {\n        name: board[i],\n        size: 50,\n        color: getDiceColor(i)\n      }, \"row\" + i)\n    }, \"row\" + i));\n  };\n\n  for (var i = 0; i < NBR_OF_DICES; i++) {\n    _loop(i);\n  }\n\n  var numberIcon = [];\n\n  var _loop2 = function _loop2(n) {\n    numberIcon.push(_jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.points,\n        children: points\n      }), _jsx(Pressable, {\n        onPress: function onPress() {\n          return selectIcons(n);\n        },\n        style: styles.icon,\n        children: _jsx(MaterialCommunityIcons, {\n          name: getIcon(n),\n          size: 40,\n          color: \"#6b705c\"\n        }, \"icon\" + n)\n      }, \"icon\" + n)]\n    }));\n  };\n\n  for (var n = 1; n < 7; n++) {\n    _loop2(n);\n  }\n\n  useEffect(function () {\n    checkWinner();\n\n    if (nbrOfThrowsLeft === NBR_OF_THROWS) {\n      setStatus('Throw dices.');\n    }\n\n    if (nbrOfThrowsLeft < 0) {\n      setNbrOfThrowsLeft(NBR_OF_THROWS - 1);\n    }\n  }, [nbrOfThrowsLeft]);\n\n  function getDiceColor(i) {\n    return selectedDices[i] ? \"#cb997e\" : \"#b7b7a4\";\n  }\n\n  function getIcon(n) {\n    return selectedIcons[n] ? \"numeric-\" + n + \"-circle\" : \"numeric-\" + n + \"-circle-outline\";\n  }\n\n  function selectDice(i) {\n    var dices = _toConsumableArray(selectedDices);\n\n    dices[i] = selectedDices[i] ? false : true;\n    setSelectedDices(dices);\n  }\n\n  function selectIcons(n) {\n    var icons = _toConsumableArray(selectedIcons);\n\n    icons[n] = selectedIcons[n] ? false : true;\n    setSelectedIcons(icons);\n    var sum = 0;\n  }\n\n  function throwDices() {\n    for (var _i = 0; _i < NBR_OF_DICES; _i++) {\n      if (!selectedDices[_i]) {\n        var randomNumber = Math.floor(Math.random() * 6 + 1);\n        board[_i] = 'dice-' + randomNumber;\n      }\n    }\n\n    setNbrOfThrowsLeft(nbrOfThrowsLeft - 1);\n  }\n\n  function checkWinner() {\n    if (board.every(function (val, i, arr) {\n      return val === arr[0];\n    }) && nbrOfThrowsLeft > 0) {\n      setStatus('You won');\n    } else if (board.every(function (val, i, arr) {\n      return val === arr[0];\n    }) && nbrOfThrowsLeft === 0) {\n      setStatus('You won, game over');\n      setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n    } else if (nbrOfThrowsLeft === 0) {\n      setStatus('Select your points.');\n      setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n    } else {\n      setStatus('Select and throw dices again.');\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.gameboard,\n    children: [_jsx(View, {\n      style: styles.flex,\n      children: row\n    }), _jsxs(Text, {\n      style: styles.gameinfo,\n      children: [\"Throws left: \", nbrOfThrowsLeft]\n    }), _jsx(Text, {\n      style: styles.gameinfo,\n      children: status\n    }), _jsx(Pressable, {\n      style: styles.button,\n      onPress: function onPress() {\n        return throwDices();\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Throw dices\"\n      })\n    }), _jsxs(Text, {\n      style: styles.total,\n      children: [\"Total: \", total]\n    }), _jsx(View, {\n      style: styles.flex,\n      children: numberIcon\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/vivien/Documents/MiniYahtzeeAssignment/components/Gameboard.js"],"names":["React","useState","useEffect","MaterialCommunityIcons","styles","Col","Grid","Row","board","NBR_OF_DICES","NBR_OF_THROWS","icons","Gameboard","nbrOfThrowsLeft","setNbrOfThrowsLeft","status","setStatus","Array","fill","selectedDices","setSelectedDices","selectedIcons","setSelectedIcons","total","setTotal","icon","setIcon","points","setPoints","row","i","push","selectDice","getDiceColor","numberIcon","n","selectIcons","getIcon","checkWinner","dices","sum","throwDices","randomNumber","Math","floor","random","every","val","arr","gameboard","flex","gameinfo","button","buttonText"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, View, Pressable} from 'react-native';\nimport MaterialCommunityIcons from'@expo/vector-icons/MaterialCommunityIcons';\nimport styles from '../style/style';\nimport { Col, Grid, Row } from \"react-native-easy-grid\";\n\nlet board = [];\nconst NBR_OF_DICES = 5;\nconst NBR_OF_THROWS = 3;\n\nlet icons = [];\n\nexport default function Gameboard() {\n    const [nbrOfThrowsLeft, setNbrOfThrowsLeft] = useState(NBR_OF_THROWS);\n    const [status, setStatus] = useState('');\n    const [selectedDices, setSelectedDices] = useState(new Array (NBR_OF_DICES).fill(false));\n    const [selectedIcons, setSelectedIcons] = useState(new Array (6).fill(false));\n    const [total, setTotal] = useState(0);\n    const [icon, setIcon] = useState(false);\n    const [points, setPoints] = useState(0);\n\n    const row = [];\n    for (let i = 0; i < NBR_OF_DICES; i++) {\n        row.push(\n            <Pressable key={\"row\" + i} onPress={() => selectDice(i)}>\n                <MaterialCommunityIcons\n                    name={board[i]}\n                    key={\"row\" + i}\n                    size={50}\n                    color={getDiceColor(i)}>\n                </MaterialCommunityIcons>\n            </Pressable>\n        );\n    }\n\n    const numberIcon = [];\n    for (let n = 1; n < 7; n++) {\n        numberIcon.push(\n            <View>\n                <Text style={styles.points}>{points}</Text>\n                <Pressable key={\"icon\" + n} onPress={() => selectIcons(n)} style={styles.icon}>\n                    <MaterialCommunityIcons\n                        name={getIcon(n)}\n                        key={\"icon\" + n}\n                        size={40}\n                        color=\"#6b705c\">\n                    </MaterialCommunityIcons>\n                </Pressable>\n            </View> \n        );\n    }\n\n    useEffect(() => {\n        checkWinner();\n        if (nbrOfThrowsLeft === NBR_OF_THROWS) {\n            setStatus('Throw dices.');\n        }\n        if (nbrOfThrowsLeft < 0) {\n            setNbrOfThrowsLeft(NBR_OF_THROWS-1);\n        }\n    }, [nbrOfThrowsLeft]);\n\n    function getDiceColor(i) {\n            return selectedDices[i] ? \"#cb997e\" : \"#b7b7a4\";\n        }\n\n    function getIcon(n) {\n        return selectedIcons[n] ? \"numeric-\" + n + \"-circle\" : \"numeric-\" + n + \"-circle-outline\";\n    }\n\n    function selectDice(i) {\n        let dices = [...selectedDices];\n        dices[i] = selectedDices[i] ? false : true;\n        setSelectedDices(dices);\n    }\n\n    function selectIcons(n) {\n        let icons = [...selectedIcons];\n        icons[n] = selectedIcons[n] ? false : true;\n        setSelectedIcons(icons);\n        let sum = 0;\n    }\n\n    function throwDices() {\n        for (let i = 0; i < NBR_OF_DICES; i++) {\n            if (!selectedDices[i]) {\n                let randomNumber = Math.floor(Math.random() * 6 + 1);\n                board[i] = 'dice-' + randomNumber;\n            }\n        }\n        setNbrOfThrowsLeft(nbrOfThrowsLeft-1);\n    }\n\n\n    function checkWinner() {\n        if (board.every((val, i, arr) => val === arr[0]) && nbrOfThrowsLeft > 0) {\n            setStatus('You won');\n        } else if (board.every((val, i, arr) => val === arr[0]) && nbrOfThrowsLeft === 0) {\n            setStatus('You won, game over');\n            setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n        } else if (nbrOfThrowsLeft === 0) {\n            setStatus('Select your points.');\n            setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n        } else {\n            setStatus('Select and throw dices again.');\n        }\n    }\n\n    return(\n        <View style={styles.gameboard}>\n            <View style={styles.flex}>{row}</View>\n            <Text style={styles.gameinfo}>Throws left: {nbrOfThrowsLeft}</Text>\n            <Text style={styles.gameinfo}>{status}</Text>\n            <Pressable style={styles.button} onPress={() => throwDices()}>\n                <Text style={styles.buttonText}>\n                    Throw dices\n                </Text>\n            </Pressable>\n            <Text style={styles.total}>Total: {total}</Text>\n            <View style={styles.flex}>{numberIcon}</View>\n        </View>\n    )\n}"]},"metadata":{},"sourceType":"module"}