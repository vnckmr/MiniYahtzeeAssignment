{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport styles from \"../style/style\";\nimport { Col } from \"react-native-easy-grid\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar board = [];\nvar NBR_OF_DICES = 5;\nvar NBR_OF_THROWS = 3;\nexport default function Gameboard() {\n  var _useState = useState(NBR_OF_THROWS),\n      _useState2 = _slicedToArray(_useState, 2),\n      nbrOfThrowsLeft = _useState2[0],\n      setNbrOfThrowsLeft = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = useState(new Array(NBR_OF_DICES).fill(false)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedDices = _useState6[0],\n      setSelectedDices = _useState6[1];\n\n  var _useState7 = useState(new Array(6).fill(false)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedIcons = _useState8[0],\n      setSelectedIcons = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      total = _useState10[0],\n      setTotal = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      points1 = _useState12[0],\n      setPoints1 = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      points2 = _useState14[0],\n      setPoints2 = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      points3 = _useState16[0],\n      setPoints3 = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      points4 = _useState18[0],\n      setPoints4 = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      points5 = _useState20[0],\n      setPoints5 = _useState20[1];\n\n  var _useState21 = useState(0),\n      _useState22 = _slicedToArray(_useState21, 2),\n      points6 = _useState22[0],\n      setPoints6 = _useState22[1];\n\n  var row = [];\n\n  var _loop = function _loop(i) {\n    row.push(_jsx(Pressable, {\n      onPress: function onPress() {\n        return selectDice(i);\n      },\n      children: _jsx(MaterialCommunityIcons, {\n        name: board[i],\n        size: 50,\n        color: getDiceColor(i)\n      }, \"row\" + i)\n    }, \"row\" + i));\n  };\n\n  for (var i = 0; i < NBR_OF_DICES; i++) {\n    _loop(i);\n  }\n\n  var numberIcon = [];\n\n  var _loop2 = function _loop2(n) {\n    numberIcon.push(_jsx(View, {\n      children: _jsx(Pressable, {\n        onPress: function onPress() {\n          return selectIcons(n);\n        },\n        style: styles.icon,\n        children: _jsx(MaterialCommunityIcons, {\n          name: getIcon(n),\n          size: 40,\n          color: \"#6b705c\"\n        }, \"icon\" + n)\n      }, \"icon\" + n)\n    }));\n  };\n\n  for (var n = 1; n < 7; n++) {\n    _loop2(n);\n  }\n\n  useEffect(function () {\n    checkWinner();\n\n    if (nbrOfThrowsLeft === NBR_OF_THROWS) {\n      setStatus('Throw dices.');\n    }\n\n    if (nbrOfThrowsLeft < 0) {\n      setNbrOfThrowsLeft(NBR_OF_THROWS - 1);\n    }\n  }, [nbrOfThrowsLeft]);\n\n  function getDiceColor(i) {\n    return selectedDices[i] ? \"#cb997e\" : \"#b7b7a4\";\n  }\n\n  function getIcon(n) {\n    return selectedIcons[n] ? \"numeric-\" + n + \"-circle\" : \"numeric-\" + n + \"-circle-outline\";\n  }\n\n  function selectDice(i) {\n    var dices = _toConsumableArray(selectedDices);\n\n    dices[i] = selectedDices[i] ? false : true;\n    setSelectedDices(dices);\n  }\n\n  function selectIcons(n) {\n    var icons = _toConsumableArray(selectedIcons);\n\n    icons[n] = selectedIcons[n] ? false : true;\n    setSelectedIcons(icons);\n    setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n    calculate();\n  }\n\n  function throwDices() {\n    for (var _i = 0; _i < NBR_OF_DICES; _i++) {\n      if (!selectedDices[_i]) {\n        var randomNumber = Math.floor(Math.random() * 6 + 1);\n        board[_i] = 'dice-' + randomNumber;\n      }\n\n      setNbrOfThrowsLeft(nbrOfThrowsLeft - 1);\n    }\n  }\n\n  function checkWinner() {\n    if (nbrOfThrowsLeft === 0) {\n      setStatus('Select your points.');\n    } else if (nbrOfThrowsLeft < 0) {\n      setNbrOfThrowsLeft(NBR_OF_THROWS - 1);\n      setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n    } else {\n      setStatus('Select and throw dices again.');\n    }\n  }\n\n  function calculate() {\n    var sum = 0;\n\n    if (selectedIcons[1] === false) {\n      sum = board[1].reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      setPoints1(sum);\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.gameboard,\n    children: [_jsx(View, {\n      style: styles.flex,\n      children: row\n    }), _jsxs(Text, {\n      style: styles.gameinfo,\n      children: [\"Throws left: \", nbrOfThrowsLeft]\n    }), _jsx(Text, {\n      style: styles.gameinfo,\n      children: status\n    }), _jsx(Pressable, {\n      style: styles.button,\n      onPress: function onPress() {\n        return throwDices();\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Throw dices\"\n      })\n    }), _jsxs(Text, {\n      style: styles.total,\n      children: [\"Total: \", total]\n    }), _jsxs(View, {\n      style: styles.points,\n      children: [_jsxs(Col, {\n        style: {\n          width: 45\n        },\n        children: [_jsx(Text, {\n          style: styles.zahl,\n          children: points1\n        }), _jsx(View, {\n          style: styles.icon,\n          children: numberIcon[0]\n        })]\n      }), _jsxs(Col, {\n        style: {\n          width: 45\n        },\n        children: [_jsx(Text, {\n          style: styles.zahl,\n          children: points2\n        }), _jsx(View, {\n          style: styles.icon,\n          children: numberIcon[1]\n        })]\n      }), _jsxs(Col, {\n        style: {\n          width: 45\n        },\n        children: [_jsx(Text, {\n          style: styles.zahl,\n          children: points3\n        }), _jsx(View, {\n          style: styles.icon,\n          children: numberIcon[2]\n        })]\n      }), _jsxs(Col, {\n        style: {\n          width: 45\n        },\n        children: [_jsx(Text, {\n          style: styles.zahl,\n          children: points4\n        }), _jsx(View, {\n          style: styles.icon,\n          children: numberIcon[3]\n        })]\n      }), _jsxs(Col, {\n        style: {\n          width: 45\n        },\n        children: [_jsx(Text, {\n          style: styles.zahl,\n          children: points5\n        }), _jsx(View, {\n          style: styles.icon,\n          children: numberIcon[4]\n        })]\n      }), _jsxs(Col, {\n        style: {\n          width: 45\n        },\n        children: [_jsx(Text, {\n          style: styles.zahl,\n          children: points6\n        }), _jsx(View, {\n          style: styles.icon,\n          children: numberIcon[5]\n        })]\n      })]\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/vivien/Documents/MiniYahtzeeAssignment/components/Gameboard.js"],"names":["React","useState","useEffect","MaterialCommunityIcons","styles","Col","board","NBR_OF_DICES","NBR_OF_THROWS","Gameboard","nbrOfThrowsLeft","setNbrOfThrowsLeft","status","setStatus","Array","fill","selectedDices","setSelectedDices","selectedIcons","setSelectedIcons","total","setTotal","points1","setPoints1","points2","setPoints2","points3","setPoints3","points4","setPoints4","points5","setPoints5","points6","setPoints6","row","i","push","selectDice","getDiceColor","numberIcon","n","selectIcons","icon","getIcon","checkWinner","dices","icons","calculate","throwDices","randomNumber","Math","floor","random","sum","reduce","a","b","gameboard","flex","gameinfo","button","buttonText","points","width","zahl"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, View, Pressable} from 'react-native';\nimport MaterialCommunityIcons from'@expo/vector-icons/MaterialCommunityIcons';\nimport styles from '../style/style';\nimport { Col } from \"react-native-easy-grid\";\n\nlet board = [];\nconst NBR_OF_DICES = 5;\nconst NBR_OF_THROWS = 3;\n// let number = [];\n// let number2 = [];\n// let number3 = [];\n// let number4 = [];\n// let number5 = [];\n// let number6 = [];\n\nexport default function Gameboard() {\n    const [nbrOfThrowsLeft, setNbrOfThrowsLeft] = useState(NBR_OF_THROWS);\n    const [status, setStatus] = useState('');\n    const [selectedDices, setSelectedDices] = useState(new Array (NBR_OF_DICES).fill(false));\n    const [selectedIcons, setSelectedIcons] = useState(new Array (6).fill(false));\n    const [total, setTotal] = useState(0);\n    const [points1, setPoints1] = useState(0);\n    const [points2, setPoints2] = useState(0);\n    const [points3, setPoints3] = useState(0);\n    const [points4, setPoints4] = useState(0);\n    const [points5, setPoints5] = useState(0);\n    const [points6, setPoints6] = useState(0);\n\n    const row = [];\n    for (let i = 0; i < NBR_OF_DICES; i++) {\n        row.push(\n            <Pressable key={\"row\" + i} onPress={() => selectDice(i)}>\n                <MaterialCommunityIcons\n                    name={board[i]}\n                    key={\"row\" + i}\n                    size={50}\n                    color={getDiceColor(i)}>\n                </MaterialCommunityIcons>\n            </Pressable>\n        );\n    }\n\n    const numberIcon = [];\n    for (let n = 1; n < 7; n++) {\n        numberIcon.push(\n            <View>\n                <Pressable key={\"icon\" + n} onPress={() => selectIcons(n)} style={styles.icon}>\n                    <MaterialCommunityIcons\n                        name={getIcon(n)}\n                        key={\"icon\" + n}\n                        size={40}\n                        color=\"#6b705c\">\n                    </MaterialCommunityIcons>\n                </Pressable>\n            </View> \n        );\n    }\n\n    useEffect(() => {\n        checkWinner();\n        if (nbrOfThrowsLeft === NBR_OF_THROWS) {\n            setStatus('Throw dices.');\n        }\n        if (nbrOfThrowsLeft < 0) {\n            setNbrOfThrowsLeft(NBR_OF_THROWS-1);\n        }\n    }, [nbrOfThrowsLeft]);\n\n    function getDiceColor(i) {\n            return selectedDices[i] ? \"#cb997e\" : \"#b7b7a4\";\n        }\n\n    function getIcon(n) {\n        return selectedIcons[n] ? \"numeric-\" + n + \"-circle\" : \"numeric-\" + n + \"-circle-outline\";\n    }\n\n    function selectDice(i) {\n        let dices = [...selectedDices];\n        dices[i] = selectedDices[i] ? false : true;\n        setSelectedDices(dices);\n    }\n\n    function selectIcons(n) {\n        let icons = [...selectedIcons];\n        icons[n] = selectedIcons[n] ? false : true;\n        setSelectedIcons(icons);\n        setSelectedDices(new Array (NBR_OF_DICES).fill(false));\n        calculate();\n    }\n\n    function throwDices() {\n        for (let i = 0; i < NBR_OF_DICES; i++) {\n            if (!selectedDices[i]) {\n                let randomNumber = Math.floor(Math.random() * 6 + 1);\n                board[i] = 'dice-' + randomNumber;\n        }\n        setNbrOfThrowsLeft(nbrOfThrowsLeft-1); \n    }\n}\n\n    function checkWinner() {\n        if (nbrOfThrowsLeft === 0) {\n            setStatus('Select your points.');\n        } else if (nbrOfThrowsLeft < 0) {\n            setNbrOfThrowsLeft(NBR_OF_THROWS-1);\n            setSelectedDices(new Array (NBR_OF_DICES).fill(false));\n        } else {\n            setStatus('Select and throw dices again.');\n        }\n    }\n\n    function calculate() {\n        let sum = 0;\n        if (selectedIcons[1] === false) {\n            sum = board[1].reduce(function(a, b) { return a + b; }, 0);\n            setPoints1(sum);\n        }\n    }\n\n    return(\n        <View style={styles.gameboard}>\n            <View style={styles.flex}>{row}</View>\n            <Text style={styles.gameinfo}>Throws left: {nbrOfThrowsLeft}</Text>\n            <Text style={styles.gameinfo}>{status}</Text>\n            <Pressable style={styles.button} onPress={() => throwDices()}>\n                <Text style={styles.buttonText}>\n                    Throw dices\n                </Text>\n            </Pressable>\n            <Text style={styles.total}>Total: {total}</Text>\n            <View style={styles.points}>\n                <Col style={{width: 45}}>\n                    <Text style={styles.zahl}>{points1}</Text>\n                    <View style={styles.icon}>{numberIcon[0]}</View>\n                </Col>\n                <Col style={{width: 45}}>\n                    <Text style={styles.zahl}>{points2}</Text>\n                    <View style={styles.icon}>{numberIcon[1]}</View>\n                </Col>\n                <Col style={{width: 45}}>\n                    <Text style={styles.zahl}>{points3}</Text>\n                    <View style={styles.icon}>{numberIcon[2]}</View>\n                </Col>\n                <Col style={{width: 45}}>\n                    <Text style={styles.zahl}>{points4}</Text>\n                    <View style={styles.icon}>{numberIcon[3]}</View>\n                </Col>\n                <Col style={{width: 45}}>\n                    <Text style={styles.zahl}>{points5}</Text>\n                    <View style={styles.icon}>{numberIcon[4]}</View>\n                </Col>\n                <Col style={{width: 45}}>\n                    <Text style={styles.zahl}>{points6}</Text>\n                    <View style={styles.icon}>{numberIcon[5]}</View>\n                </Col>\n            </View>\n        </View>\n    )\n}\n\n\n/*for(index = 0; index < 5; index++) {\n    if (dices[i] == 6) {\n        setPoints6(points6 + 6);\n    }\n    if (dices[i] == 5) {\n        setPoints5(points5 + 5);\n    }\n    if (dices[i] == 4) {\n        setPoints4(points4 + 4);\n    }\n    if (dices[i] == 3) {\n        setPoints3(points3 + 3);\n    }\n    if (dices[i] == 2) {\n        setPoints2(points2 + 2);\n    }\n    if (dices[i] == 1) {\n        setPoints1(points1 + 1);\n    }\n}\n*/"]},"metadata":{},"sourceType":"module"}