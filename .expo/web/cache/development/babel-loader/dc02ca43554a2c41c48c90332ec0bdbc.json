{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\nimport styles from \"../style/style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar board = [];\nvar diceValues = [];\nvar diceSums = [0, 0, 0, 0, 0, 0];\nvar NBR_OF_DICES = 5;\nvar NBR_OF_THROWS = 3;\nvar plusBonus = false;\nexport default function Gameboard() {\n  var _useState = useState(NBR_OF_THROWS),\n      _useState2 = _slicedToArray(_useState, 2),\n      nbrOfThrowsLeft = _useState2[0],\n      setNbrOfThrowsLeft = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = useState(new Array(NBR_OF_DICES).fill(false)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedDices = _useState6[0],\n      setSelectedDices = _useState6[1];\n\n  var _useState7 = useState(new Array(6).fill(false)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedIcons = _useState8[0],\n      setSelectedIcons = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      total = _useState10[0],\n      setTotal = _useState10[1];\n\n  var _useState11 = useState(63),\n      _useState12 = _slicedToArray(_useState11, 2),\n      bonus = _useState12[0],\n      setBonus = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      bonusStatus = _useState14[0],\n      setBonusStatus = _useState14[1];\n\n  var _useState15 = useState('Throw dices'),\n      _useState16 = _slicedToArray(_useState15, 2),\n      buttonText = _useState16[0],\n      setButtonText = _useState16[1];\n\n  function initialize() {\n    setNbrOfThrowsLeft(3);\n    setStatus('Game has not started.');\n    setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n    setSelectedIcons(new Array(6).fill(false));\n    setTotal(0);\n    setBonus(63);\n    setButtonText('Throw dices');\n    plusBonus = false;\n    diceSums = [0, 0, 0, 0, 0, 0];\n  }\n\n  var row = [];\n\n  var _loop = function _loop(i) {\n    row.push(_jsx(Pressable, {\n      onPress: function onPress() {\n        return selectDice(i);\n      },\n      children: _jsx(MaterialCommunityIcons, {\n        name: board[i],\n        size: 50,\n        color: getDiceColor(i)\n      }, \"row\" + i)\n    }, \"row\" + i));\n  };\n\n  for (var i = 0; i < NBR_OF_DICES; i++) {\n    _loop(i);\n  }\n\n  var numberIcon = [];\n\n  var _loop2 = function _loop2(n) {\n    numberIcon.push(_jsxs(View, {\n      children: [_jsx(Text, {\n        style: styles.zahl,\n        children: diceSums[n - 1]\n      }), _jsx(Pressable, {\n        onPress: function onPress() {\n          return selectIcons(n);\n        },\n        style: styles.icon,\n        children: _jsx(MaterialCommunityIcons, {\n          name: getIcon(n),\n          size: 40,\n          color: \"#6b705c\"\n        }, \"icon\" + n)\n      }, \"icon\" + n)]\n    }, \"icons\" + n));\n  };\n\n  for (var n = 1; n < 7; n++) {\n    _loop2(n);\n  }\n\n  useEffect(function () {\n    checkWinner();\n    getBonus();\n\n    if (selectedIcons[1] === true && selectedIcons[2] === true && selectedIcons[3] === true && selectedIcons[4] === true && selectedIcons[5] === true && selectedIcons[6] === true) {\n      setButtonText('New game');\n    }\n\n    if (nbrOfThrowsLeft === NBR_OF_THROWS) {\n      setStatus('Throw dices.');\n    }\n\n    if (nbrOfThrowsLeft < 0) {\n      setNbrOfThrowsLeft(NBR_OF_THROWS - 1);\n    }\n  }, [nbrOfThrowsLeft, buttonText, selectedIcons]);\n\n  function getDiceColor(i) {\n    return selectedDices[i] ? \"#cb997e\" : \"#b7b7a4\";\n  }\n\n  function getIcon(n) {\n    return selectedIcons[n] ? \"numeric-\" + n + \"-circle\" : \"numeric-\" + n + \"-circle-outline\";\n  }\n\n  function selectDice(i) {\n    if (nbrOfThrowsLeft === 3) {\n      setStatus(\"Throw the dices first\");\n    } else {\n      var dices = _toConsumableArray(selectedDices);\n\n      dices[i] = selectedDices[i] ? false : true;\n      setSelectedDices(dices);\n    }\n  }\n\n  function selectIcons(n) {\n    if (nbrOfThrowsLeft === 3) {\n      setStatus('You already selected a number');\n    } else if (nbrOfThrowsLeft === 2 || nbrOfThrowsLeft === 1) {\n      setStatus('Throw dices 3 times and then select your points.');\n    } else if (!selectedIcons[n]) {\n      var icons = _toConsumableArray(selectedIcons);\n\n      icons[n] = true;\n      setSelectedIcons(icons);\n      var sum = 0;\n\n      for (var _i = 0; _i < 6; _i++) {\n        if (n === diceValues[_i]) {\n          sum += diceValues[_i];\n        }\n      }\n\n      diceSums[n - 1] = sum;\n      setTotal(total + sum);\n      setBonus(bonus - sum);\n      getBonus();\n      setNbrOfThrowsLeft(3);\n      setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n    } else {\n      setStatus('You already selected this number.');\n    }\n  }\n\n  function getBonus() {\n    if (bonus > 0) {\n      setBonusStatus('You are ' + bonus + ' points away from the bonus.');\n    } else if (bonus <= 0 && selectedIcons[1] === true && selectedIcons[2] === true && selectedIcons[3] === true && selectedIcons[4] === true && selectedIcons[5] === true && selectedIcons[6] === true) {\n      plusBonus = true;\n      setBonusStatus('You got the bonus!');\n    } else if (bonus <= 0) {\n      setBonusStatus('You got the bonus!');\n    }\n  }\n\n  function throwDices() {\n    if (nbrOfThrowsLeft === 0) {\n      setStatus('Select your points first');\n    } else {\n      for (var _i2 = 0; _i2 < NBR_OF_DICES; _i2++) {\n        if (buttonText === 'New game') {\n          initialize();\n          var randomNumber = Math.floor(Math.random() * 6 + 1);\n          board[_i2] = 'dice-' + randomNumber;\n          diceValues[_i2] = randomNumber;\n        } else if (!selectedDices[_i2]) {\n          var _randomNumber = Math.floor(Math.random() * 6 + 1);\n\n          board[_i2] = 'dice-' + _randomNumber;\n          diceValues[_i2] = _randomNumber;\n        }\n\n        setNbrOfThrowsLeft(nbrOfThrowsLeft - 1);\n      }\n    }\n  }\n\n  function checkWinner() {\n    if (nbrOfThrowsLeft < 0) {\n      setNbrOfThrowsLeft(NBR_OF_THROWS - 1);\n      setSelectedDices(new Array(NBR_OF_DICES).fill(false));\n    } else if (nbrOfThrowsLeft === 0) {\n      setStatus('Select your points.');\n    } else {\n      setStatus('Select and throw dices again.');\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.gameboard,\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\"\n    }), _jsx(View, {\n      style: styles.flex,\n      children: row\n    }), _jsxs(Text, {\n      style: styles.gameinfo,\n      children: [\"Throws left: \", nbrOfThrowsLeft]\n    }), _jsx(Text, {\n      style: styles.gameinfo,\n      children: status\n    }), _jsx(Pressable, {\n      style: styles.button,\n      onPress: function onPress() {\n        return throwDices();\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: buttonText\n      })\n    }), _jsxs(Text, {\n      style: styles.total,\n      children: [\"Total: \", plusBonus ? total + 35 : total]\n    }), _jsx(Text, {\n      style: styles.bonus,\n      children: bonusStatus\n    }), _jsx(View, {\n      style: styles.points,\n      children: numberIcon\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/vivien/Documents/MiniYahtzeeAssignment/components/Gameboard.js"],"names":["React","useState","useEffect","MaterialCommunityIcons","styles","board","diceValues","diceSums","NBR_OF_DICES","NBR_OF_THROWS","plusBonus","Gameboard","nbrOfThrowsLeft","setNbrOfThrowsLeft","status","setStatus","Array","fill","selectedDices","setSelectedDices","selectedIcons","setSelectedIcons","total","setTotal","bonus","setBonus","bonusStatus","setBonusStatus","buttonText","setButtonText","initialize","row","i","push","selectDice","getDiceColor","numberIcon","n","zahl","selectIcons","icon","getIcon","checkWinner","getBonus","dices","icons","sum","throwDices","randomNumber","Math","floor","random","gameboard","flex","gameinfo","button","points"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, View, Pressable, StatusBar} from 'react-native';\nimport MaterialCommunityIcons from'@expo/vector-icons/MaterialCommunityIcons';\nimport styles from '../style/style';\n\nlet board = [];\nlet diceValues = [];\nlet diceSums = [0, 0, 0, 0, 0, 0];\nconst NBR_OF_DICES = 5;\nconst NBR_OF_THROWS = 3;\n\nlet plusBonus = false;\n\nexport default function Gameboard() {\n    const [nbrOfThrowsLeft, setNbrOfThrowsLeft] = useState(NBR_OF_THROWS);\n    const [status, setStatus] = useState('');\n    const [selectedDices, setSelectedDices] = useState(new Array (NBR_OF_DICES).fill(false));\n    const [selectedIcons, setSelectedIcons] = useState(new Array (6).fill(false));\n    const [total, setTotal] = useState(0);\n    const [bonus, setBonus] = useState(63);\n    const [bonusStatus, setBonusStatus] = useState('');\n    const [buttonText, setButtonText] = useState('Throw dices')\n\n    function initialize() {\n        setNbrOfThrowsLeft(3);\n        setStatus('Game has not started.');\n        setSelectedDices(new Array (NBR_OF_DICES).fill(false))\n        setSelectedIcons(new Array (6).fill(false));\n        setTotal(0);\n        setBonus(63);\n        setButtonText('Throw dices');\n        plusBonus = false;\n        diceSums = [0, 0, 0, 0, 0, 0];\n    }\n\n    const row = [];\n    for (let i = 0; i < NBR_OF_DICES; i++) {\n        row.push(\n            <Pressable key={\"row\" + i} onPress={() => selectDice(i)}>\n                <MaterialCommunityIcons\n                    name={board[i]}\n                    key={\"row\" + i}\n                    size={50}\n                    color={getDiceColor(i)}>\n                </MaterialCommunityIcons>\n            </Pressable>\n        );\n    }\n\n    const numberIcon = [];\n    for (let n = 1; n < 7; n++) {\n        numberIcon.push(\n            <View key={\"icons\" + n}>\n                <Text style={styles.zahl}>{diceSums[n - 1]}</Text>\n                <Pressable key={\"icon\" + n} onPress={() => selectIcons(n)} style={styles.icon}>\n                    <MaterialCommunityIcons\n                        name={getIcon(n)}\n                        key={\"icon\" + n}\n                        size={40}\n                        color=\"#6b705c\">\n                    </MaterialCommunityIcons>\n                </Pressable>\n            </View> \n        );\n    }\n\n    useEffect(() => {\n        checkWinner();\n        getBonus();\n        if (selectedIcons[1] === true && selectedIcons[2] === true && selectedIcons[3] === true && selectedIcons[4] === true && selectedIcons[5] === true && selectedIcons[6] === true) {\n            setButtonText('New game');\n        }\n        if (nbrOfThrowsLeft === NBR_OF_THROWS) {\n            setStatus('Throw dices.');\n        }\n        if (nbrOfThrowsLeft < 0) {\n            setNbrOfThrowsLeft(NBR_OF_THROWS-1);\n        }\n    }, [nbrOfThrowsLeft, buttonText, selectedIcons]);\n\n    function getDiceColor(i) {\n            return selectedDices[i] ? \"#cb997e\" : \"#b7b7a4\";\n        }\n\n    function getIcon(n) {\n        return selectedIcons[n] ? \"numeric-\" + n + \"-circle\" : \"numeric-\" + n + \"-circle-outline\";\n    }\n\n    function selectDice(i) {\n        if (nbrOfThrowsLeft === 3) {\n            setStatus(\"Throw the dices first\")\n        } else {\n            let dices = [...selectedDices];\n            dices[i] = selectedDices[i] ? false : true;\n            setSelectedDices(dices);\n        }\n        \n    }\n\n    function selectIcons(n) {\n        if (nbrOfThrowsLeft === 3) {\n            setStatus('You already selected a number')\n        } else if (nbrOfThrowsLeft === 2 || nbrOfThrowsLeft === 1){\n            setStatus('Throw dices 3 times and then select your points.')\n        }\n        else if (!selectedIcons[n]) {\n            let icons = [...selectedIcons];\n            icons[n] = true;\n            setSelectedIcons(icons);\n            var sum = 0;\n            for (let i = 0; i < 6; i++) {\n                if (n === diceValues[i]) {\n                    sum += diceValues[i];\n                }\n            } \n            diceSums[n-1] = sum;\n            setTotal(total+sum);\n            setBonus(bonus-sum);\n            getBonus();\n            setNbrOfThrowsLeft(3);\n            setSelectedDices(new Array (NBR_OF_DICES).fill(false));\n        }\n        else {\n            setStatus('You already selected this number.')\n        }\n    }\n\n    function getBonus() {\n        if (bonus > 0) {\n            setBonusStatus('You are ' +bonus+ ' points away from the bonus.')\n        } else if (bonus <= 0 && selectedIcons[1] === true && selectedIcons[2] === true && selectedIcons[3] === true && selectedIcons[4] === true && selectedIcons[5] === true && selectedIcons[6] === true) {\n            plusBonus = true;\n            setBonusStatus('You got the bonus!')\n        } else if (bonus <= 0) {\n            setBonusStatus('You got the bonus!')\n        }\n    }\n\n    function throwDices() {\n        if (nbrOfThrowsLeft === 0) {\n            setStatus('Select your points first');\n        }\n        else {\n            for (let i = 0; i < NBR_OF_DICES; i++) {\n                if (buttonText === 'New game') {\n                    initialize();\n                    let randomNumber = Math.floor(Math.random() * 6 + 1);\n                    board[i] = 'dice-' + randomNumber;\n                    diceValues[i] = randomNumber;\n                }\n                else if (!selectedDices[i]) {\n                    let randomNumber = Math.floor(Math.random() * 6 + 1);\n                    board[i] = 'dice-' + randomNumber;\n                    diceValues[i] = randomNumber;\n                }\n            setNbrOfThrowsLeft(nbrOfThrowsLeft-1); \n            }\n        }  \n    }\n\n    function checkWinner() {\n        if (nbrOfThrowsLeft < 0) {\n            setNbrOfThrowsLeft(NBR_OF_THROWS-1);\n            setSelectedDices(new Array (NBR_OF_DICES).fill(false));\n        } else if (nbrOfThrowsLeft === 0) {\n            setStatus('Select your points.')\n        }\n        else {\n            setStatus('Select and throw dices again.');\n        }\n    }\n\n    return(\n        <View style={styles.gameboard}>\n            <StatusBar barStyle='dark-content'></StatusBar>\n            <View style={styles.flex}>{row}</View>\n            <Text style={styles.gameinfo}>Throws left: {nbrOfThrowsLeft}</Text>\n            <Text style={styles.gameinfo}>{status}</Text>\n            <Pressable style={styles.button} onPress={() => throwDices()}>\n                <Text style={styles.buttonText}>\n                    {buttonText}\n                </Text>\n            </Pressable>\n            <Text style={styles.total}>Total: {plusBonus ? total + 35 : total}</Text>\n            <Text style={styles.bonus}>{bonusStatus}</Text>\n            <View style={styles.points}>{numberIcon}</View>\n        </View>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}